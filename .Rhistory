setwd("~/Documents/GitHub/immunoparasite")
knitr::opts_chunk$set(echo = TRUE,
dev=c('png','tiff'),
fig.path='figures/')
library(ggplot2)
library(tidyverse)
dyn.load("dimensionless_model.dll")
system("R CMD SHLIB dimensionless_model.c")
system("rm dimensionless_model.so")
system("rm dimensionless_model.o")
system("rm dimensionless_model.dll")
system("R CMD SHLIB dimensionless_model.c")
dyn.load("dimensionless_model.dll")
iij = 10
tic <- Sys.time()
print(iij)
results = vector(mode='list', length=6*10*201*191)
i = 1
for (rel in seq(0,0.5,0.1)) {
for (totalI in seq(0.2,2,0.2)) {
for (Th1.0 in seq(0,totalI,totalI/200)) {
for (P.0 in seq(0.01,0.2,0.001)) {
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while(abs(diff(tail(out[,4],2))) > 1e-12 & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
}
results[[i]] <- c(rel,totalI,Th1.0,P.0,as.numeric(tail(out[,1:4],1)))
i = i+1
}
}
}
}
library(deSolve)
for (rel in seq(0,0.5,0.1)) {
for (totalI in seq(0.2,2,0.2)) {
for (Th1.0 in seq(0,totalI,totalI/200)) {
for (P.0 in seq(0.01,0.2,0.001)) {
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while(abs(diff(tail(out[,4],2))) > 1e-12 & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
}
results[[i]] <- c(rel,totalI,Th1.0,P.0,as.numeric(tail(out[,1:4],1)))
i = i+1
}
}
}
}
results = vector(mode='list', length=6*10*201*191)
i = 1
for (rel in seq(0,0.5,0.1)) {
print(rel)
for (totalI in seq(0.2,2,0.2)) {
for (Th1.0 in seq(0,totalI,totalI/200)) {
for (P.0 in seq(0.01,0.2,0.001)) {
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while(abs(diff(tail(out[,4],2))) > 1e-12 & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
}
results[[i]] <- c(rel,totalI,Th1.0,P.0,as.numeric(tail(out[,1:4],1)))
i = i+1
}
}
}
}
results = do.call("rbind.data.frame",results)
colnames(results) = c("Th2activation","initT","initTh1","initP","t","Th1","Th2","P")
mutate(results,
Th1bias=initTh1/initT,
P=round(results$P,3),
initT = round(results$initT,1),
outcome = rep(0,nrow(results))) -> results
which(results$P==0 & results$Th2 > 1 & results$Th1 < 0.5)
which(results$t==5000)
## 1. Th2 polarization and parasite extinction
results$outcome[which(results$P==0 & results$Th2 > 1 & results$Th1 < 0.5)] = 1
results[which(results$t==5000),]
results$Th1[which(results$t==5000)] %>% range()
results$Th2[which(results$t==5000)] %>% range()
results$P[which(results$t==5000)] %>% range()
which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.9 & results$Th2 > 0.9)
which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$P > 0 & results$P < 0.4 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$P > 0 & results$P < 0.4 & results$Th1 > 0.7 & results$Th2 > 0.7)
which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$P > 0 & results$P < 0.4 & results$Th1 > 0.7 & results$Th2 > 0.7)
which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
results$P[which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)]
results$P[which(results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% range
results$P[which(results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% range
results$P[which(results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)]
results$P[which(results$t < 1000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% range
results$P[which(results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t < 4000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t < 1000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t < 500 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t > 500 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t > 500 & results < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
which(is.na(results$P))
results$P[which(results$t > 500 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t > 1000 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results$P[which(results$t > 10]00 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
results$P[which(results$t > 10]00 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)]
results$P[which(results$t > 1000 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)]
results$P[which(results$t > 1000 & results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
results[which(results$P==0.009),]
results[which(results$P==0.007),]
results[which(results$P==0.011),]
results$P[which(results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
which(results$P > 0.7 & results$Th1 > 1 & results$Th2 < 0.3)
which(results$P > 0.6 & results$Th1 > 1 & results$Th2 < 0.3)
which(results$P > 0.7 & results$Th1 > 1 & results$Th2 < 0.4)
which(results$P > 0.7 & results$Th1 > 1 & results$Th2 < 0.3)
which(results$P > 0.7 & results$Th1 > 0.9 & results$Th2 < 0.3)
## 3. Th1 polarization and chronic infection
results$outcome[which(results$P > 0.7 & results$Th1 > 1 & results$Th2 < 0.3)] = 3
which(results$P > 0.7 & results$Th1 < 0.3 & results$Th2 < 0.3)
which(results$P > 0.6 & results$Th1 < 0.3 & results$Th2 < 0.3)
which(results$P > 0.7 & results$Th1 < 0.4 & results$Th2 < 0.4)
## 4. Low coactivation and chronic infection
results$outcome[which(results$P > 0.7 & results$Th1 < 0.3 & results$Th2 < 0.3)] = 4
results
results$t[results$outcome==0] %>% unique
results[which(results$outcome==0 & results$t < 5000),]
which(results$t < 5000 & results$P > 0 & results < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$t < 5000 & results$P > 0 & results < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$t < 5000 & results$P > 0 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$t < 5000 & results$P > 0 & results$P < 0.3 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$t < 5000 & results$P > 0 & results$Th1 > 0.8 & results$Th2 > 0.8)
results$P[which(results$t < 5000 & results$P > 0 & results$Th1 > 0.8 & results$Th2 > 0.8)]
results$P[which(results$t < 5000 & results$P > 0 & results$Th1 > 0.8 & results$Th2 > 0.8)] %>% unique
## 1. Th2 polarization and parasite extinction
results$outcome[which(results$P==0 & results$Th2 > 1 & results$Th1 < 0.5)] = 1
## 2. High coactivation and extinction
results$outcome[which(results$t < 5000 & results$P==0 & results$Th1 > 0.8 & results$Th2 > 0.8)] = 2
## 2.33 High coactivation and near-extinction
results$outcome[which(results$t < 5000 & results$P > 0 & results$Th1 > 0.8 & results$Th2 > 0.8)] = 2.33
## 2.66 High coactivation and cycling
results$outcome[which(results$t==5000)] = 2.66
## 3. Th1 polarization and chronic infection
results$outcome[which(results$P > 0.7 & results$Th1 > 1 & results$Th2 < 0.3)] = 3
## 4. Low coactivation and chronic infection
results$outcome[which(results$P > 0.7 & results$Th1 < 0.3 & results$Th2 < 0.3)] = 4
which(results$outcome==0)
results[which(results$outcome==0),]
which(results$t < 5000 & results$P==0 & results$Th1 > 0.8 & results$Th2 > 0.8)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.7 & results$Th2 > 0.7)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.6 & results$Th2 > 0.6)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.5 & results$Th2 > 0.5)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.4 & results$Th2 > 0.4)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.5 & results$Th2 > 0.5)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.3 & results$Th2 > 0.3)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.4 & results$Th2 > 0.4)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.3 & results$Th2 > 0.3)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.2 & results$Th2 > 0.2)
which(results$t < 5000 & results$P==0 & results$Th1 > 0.1 & results$Th2 > 0.1)
which(results$P==0 & results$Th2 < 0.8)
results[which(results$P==0 & results$Th2 < 0.8),]
results$P[which(results$Th2activation==0.2)]
results$P[which(results$Th2activation==0.2)] %>% unique
results[which(results$Th2activation==0.2 & results$P==0),]
results[which(results$Th2activation==0.2 & results$P==0 & results$Th2 < 1.5),]
rel = 0.2
results[which(results$Th2activation==0.2 & results$P==0 & results$Th2 < 1.5),] %>% tail()
totalI = 2
Th1.0 = 1.04
P.0 = 0.2
iij
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
times = seq(0,500)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
(abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
(abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
(abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000
print(iij)
results = vector(mode='list', length=6*10*201*191)
i = 1
for (rel in seq(0,0.5,0.1)) {
print(rel)
for (totalI in seq(0.2,2,0.2)) {
for (Th1.0 in seq(0,totalI,totalI/200)) {
for (P.0 in seq(0.01,0.2,0.001)) {
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while((abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
}
results[[i]] <- c(rel,totalI,Th1.0,P.0,as.numeric(tail(out[,1:4],1)))
i = i+1
}
}
}
}
rel
totalI
Th1.0
P.0
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
while((abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
}
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
if(out[101,4] < 0) out[101,4] = 0
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
tail(out)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while((abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
if(out[101,4] < 0) out[101,4] = 0
}
results = vector(mode='list', length=6*10*201*191)
i = 1
for (rel in seq(0,0.5,0.1)) {
print(rel)
for (totalI in seq(0.2,2,0.2)) {
for (Th1.0 in seq(0,totalI,totalI/200)) {
for (P.0 in seq(0.01,0.2,0.001)) {
params = c(b1=0.000111111, b2=.000111111,
s1=2.22222, s2=2.22222,
i12=iij, i21=iij,
k1=1/6, k2=1/6,
c1=(1-rel)*0.111111, c2=(1+rel)*0.111111,
r=3.33333, a=3.33333)
y0 = c(Th1=Th1.0, Th2=totalI-Th1.0, P=P.0)
times = seq(0,100)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
while((abs(diff(tail(out[,2],2))) > 1e-12 | abs(diff(tail(out[,3],2))) > 1e-12 | abs(diff(tail(out[,4],2))) > 1e-12) & tail(out[,1],1) < 5000) {
#print(paste("more simulation required for", rel,totalI,Th1.0,P.0))
times = seq(tail(out[,1],1),tail(out[,1],1)+100,1)
y0 = tail(out[,2:4],1)
out = ode(y0, times, func="derivs", parms=params, dllname="dimensionless_model", initfunc="initmod", atol=1e-12, rtol=1e-12)
if(out[101,4] < 0) out[101,4] = 0
}
results[[i]] <- c(rel,totalI,Th1.0,P.0,as.numeric(tail(out[,1:4],1)))
i = i+1
}
}
}
}
