plot.window(xlim=c(max(z$date,na.rm=T)-X, max(z$date,na.rm=T)+2), ylim=range(subset(z, date >= max(date)-X)$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(z$date %>% as.numeric() %>% max-X,z$date %>% as.numeric() %>% max,by=7), labels=seq(max(z$date)-X, max(z$date), 7)); box('plot')
mtext(side=2, line=3, "Cases/100k")
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), lines(date, casesPer100k, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), text(max(date)+2, tail(casesPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(z$date,na.rm=T)-X, max(z$date,na.rm=T)+2), ylim=c(0,max(subset(z, date >= max(date)-X)$testsPer100k, na.rm=T)))
axis(2); axis(1, at=seq(z$date %>% as.numeric() %>% max-X,z$date %>% as.numeric() %>% max,by=7), labels=seq(max(z$date)-X, max(z$date), 7)); box('plot')
mtext(side=2, line=3, "Tests/100k")
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), lines(date, testsPer100k, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), text(max(date)+2, tail(testsPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
install.packages('phaseR')
knitr::opts_chunk$set(echo = TRUE,
dev=c('png','tiff'),
fig.path='figures/')
library(phaseR, quietly=TRUE)
derivs = function(t, y, params) {
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
T1 <- y[1]
T2 <- y[2]
dT1 <- b1 + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2) - m*T1
dT2 <- b2 + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1) - m*T2
list(c(dT1, dT2))
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=120, b2=120, I12=10000, I21=10000, m=1)
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
library(magrittr)
set.seed(1234)
seeds <- runif(50, 1, 1000) %>% floor
install.packages("animation")
library(animation)
setwd("~/immunoparasite")
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(500, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e5, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e5, 4)))
}
out <- out[1:(i-1),]
return(out)
}
out <- gillespie_sim(500, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=100, S2=100, s1=200, s2=200, b1=0.1, b2=0.1, I12=1000, I21=1000, m=0.1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=100, S2=100, s1=200, s2=200, b1=0.1, b2=0.1, I12=1000, I21=1000, m=0.1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
print(out[1,])
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
#print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
print(out[1,])
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
print(rates)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
#print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
print(out[1,])
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
print(rates)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
print(c(t,T1,T2,P))
i <- i + 1
#print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.02, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.05, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=100, S2=100, s1=200, s2=200, b1=0.1, b2=0.1, I12=1000, I21=1000, m=1, c1=1, c2=1, bp=0.05, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.05, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.2, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
print(out[1,])
i <- 2
while (t < tmax) {
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
#print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.3, Kp=120)
out <- gillespie_sim(30, y0=c(5, 5, 10), params=params, seed=seeds[1])
tail(out)
inds <- sapply(seq(10,199,1), function(p) min(which(out[,"P"] > p)))
warnings()
## Plot the isoclines and the Th1/Th2 trajectory as the parasite population grows
## What I want to do is create a series of plots (which will be turned into movies) that shows the Th1/Th2 balance and the isocline configuration every time P crosses a threshold (e.g., every 1 new parasite)
inds <- sapply(seq(10,119,1), function(p) min(which(out[,"P"] > p)))
ind
inds
## Plot the isoclines and the Th1/Th2 trajectory as the parasite population grows
## What I want to do is create a series of plots (which will be turned into movies) that shows the Th1/Th2 balance and the isocline configuration every time P crosses a threshold (e.g., every 1 new parasite)
inds <- sapply(seq(10,max(out[,"P"]),1), function(p) min(which(out[,"P"] > p)))
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
